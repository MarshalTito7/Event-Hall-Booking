{
    "swagger": "2.0",
    "info": {
        "description": "This is a NodeJS API project to book event halls based on their availability",
        "version": "1.0.0",
        "title": "Event Hall Booking System",
        "contact": {
            "email": "parijat.niyogy@tcs.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "schema" : {
        "Halls" : {
            "type": "object",
            "properties" : {
                "hallId" : {
                "type": "string",
                "required": true,
                "unique": true,
                "trim": true,
                "maxlength": 10
                
                },
                "name": {
                    "type": "string",
                    "required": true
                },
                "address" : {
                    "type": "string",
                    "required": true
                },
                "location": {
                
                    "type": "string", 
                    "enum": ["point"],
                    "coordinates": {
                    "type": ["number"],
                    "index": "2dsphere"
                    },
                    "formattedAddress": "string",
                    "city": "string",
                    "pin": "number"
                },
                "rate": {
                    "type": "number",
                    "required": "[true, 'Please add the rate for the hall']"
                },
                "advcanceamt": {
                    "type": "number",
                    "required": "[true, 'Please add the advance amount required for booking the hall']"
                },
                "cancellable": {
                    "type": "boolean",
                    "required": "[true, 'Please select an option']"
                }
            }
        }
    },
    "schemes": ["http","https"],
    "host": "api",
    "basePath": "/v1",
    "tags": {
        "name": "Event Hall",
        "description": "Event Hall owners can create, update, delete event halls",
        "name": "Bookings",
        "description": "End customers can book the halls depending upon the occasion"
    },
    "paths" : {
        "/eventhall" : {
            "post": {
                "tags": [
                    "Event Hall"
                ],
                "summary": "Add the event halls",
                "description": "",
                "operationId": "setHall",
                "consumes": [
                "application/json"
                ],
                "produces": [
                "application/json"
                ],
                "parameters": [
                    {
                    "in": "body",
                    "name": "body",
                    "description": "Event Hall that needs to be added to the hall owner",
                    "required": true,
                    "schema": {
                        "$ref": "#/schema/Halls"
                    }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "This hall already exists"
                    },
                    "500" : {
                        "description": "Server error"
                    },
                    "200" : {
                        "description": "successful operation"
                    }
                }
            } 
        },
        "/eventhall/{id}" : {
            "put": {
                "tags": [
                  "Event Hall"
                ],
                "summary": "Update an existing hall",
                "description": "",
                "operationId": "updateHall",
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Event hall id that needs to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Event Hall that needs to be updated to the hall owner",
                        "required": true,
                        "schema": {
                            "$ref": "#/schema/Halls"
                        }
                    }
                ],
                "responses": {
                  "400": {
                    "description": "Hall not found"
                  },
                  "200" : {
                    "description": "successful operation"
                  }
                }
            },
            "get": {
                "tags": [
                    "Event Hall"
                ],
                "summary": "Finds the datails of a single event hall",
                "description": "works on the id of the entries",
                "operationId": "getSingleHalls",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Event hall id that needs to be searched",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "successful operation",
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/schema/Halls"
                      }
                    }
                  }
    
                }
            }

        },
        "/todo" : {
            "get" : {
                "summary" : "Save the task",
                "description": "Save the task",
                "produces": ["application/json"],
                "consumes": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "task object",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "task" : {
                                    "type": "object",
                                    "$ref": "#/definitions/Task"
                                } 
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/todosResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value",
                        "schema": {
                            "$ref": "#/definitions/InvalidResponse"
                        }
                    }
                }
            }
        },
        "/todo/{id}" : {
            "delete" : {
                "summary" : "Delete the task",
                "description": "Delete the task",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "task id that needs to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/todosResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value",
                        "schema": {
                            "$ref": "#/definitions/InvalidResponse"
                        }
                    }
                }
            }
        }
    }, 
    "definitions": {
        "todosResponse": {
            "type": "object",
            "properties": {
                "id": {
                     "type": "integer"
                },
                "task": {
                    "type": "string"
                },
                "assignee": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "Task": {
            "type": "object",
            "properties": {
                "task": {
                    "type": "string"
                },
                "assignee": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "InvalidResponse": {
            "type": "object",
            "properties": {
                "statusCode": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }

        }
    }
}